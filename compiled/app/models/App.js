// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var dealerHand, deck, playerHand;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      playerHand = this.get('playerHand');
      dealerHand = this.get('dealerHand');
      playerHand.on('bust', function() {
        return console.log('player busted');
      });
      playerHand.on('stand', (function(_this) {
        return function() {
          return dealerHand.dealerHit();
        };
      })(this));
      return dealerHand.on('dealerFinished', (function(_this) {
        return function() {
          return _this.compareScores();
        };
      })(this));
    };

    App.prototype.compareScores = function() {
      var dealerScore, playerScore;
      playerScore = (this.get('playerHand')).scores()[0];
      dealerScore = (this.get('dealerHand')).scores()[0];
      if (playerScore > dealerScore) {
        return this.trigger('won', 'won');
      } else if (playerScore < dealerScore) {
        return this.trigger('lost', 'lost');
      } else {
        return this.trigger('tie', 'tie');
      }
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.map
